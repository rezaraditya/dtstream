# -*- coding: utf-8 -*-
"""Decision Tree FDP

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RYr6fnzNgNIaOvT4Bxira0tVKrIi_ZF4
"""

# # Data Preprocessing
# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Mounting Google Drive
from google.colab import drive
drive.mount('/content/drive')

from google.colab import files
Uploaded=files.upload()

dataset= pd.read_csv('Social_Network_Ads.csv')
print(dataset)

#Check Missing Data
dataset.isnull().sum()

# Extracting dependent and independent variables:
# Extracting independent variable:
X = dataset.iloc[:, [2, 3]].values
# Extracting dependent variable:
y = dataset.iloc[:, 4].values

print(X)

print(y)

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 5)

print(X_train)

print(X_test)

print(y_test)

print(y_train)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

print(X_train)

print(X_test)

# Fitting Decision Tree Classification to the Training set
from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 42)
classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred = classifier.predict(X_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print('Confusion matrix: ')
print(cm)

# calculate Accuracy
#   0   1
# 0[59  7(FP type 1)]
#1 [ 11(FN Type 2) 23]= 82/100

from sklearn.metrics import accuracy_score
print('Accuracy: %.2f' % (accuracy_score(y_test, y_pred)*100))

from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
# calculate precision
# Precision = TruePositives / (TruePositives + FalsePositives) 
# calculate Accuracy
#   0   1
# 0[59  7(FP type 1)]
#1 [ 11(FN Type 2) 23]= 82/100
precision = precision_score(y_test, y_pred, average='binary')
print('Precision: %.3f' % (precision))

# calculate recall
# Recall = TruePositives / (TruePositives + FalseNegatives)
# calculate Accuracy
#   0   1
# 0[59  7(FP type 1)]
#1 [ 11(FN Type 2) 23]= 82/100
recall = recall_score(y_test, y_pred, average='binary')
print('Recall: %.3f' % (recall))

# F-Measure = (2 * Precision * Recall) / (Precision + Recall)
# (2*0.829*0.906)/0.829+0.906
# calculate score
score = f1_score(y_test, y_pred, average='binary')
print('F-Measure: %.3f' % (score*100))

Age =  46#@param {type:"number"}
Estimated_Salary = 41000#@param {type:"number"}


output= classifier.predict(sc.transform([[Age,Estimated_Salary]]))
print("Purchased", output)
if output==[1]:
  print("Item will be purchased")
else:
  print("item will not be purchased")

import pickle 
print("[INFO] Saving model...")
# Save the trained model as a pickle string. 
saved_model=pickle.dump(classifier,open('/content/drive/My Drive/decision_model.pkl', 'wb')) 
# Saving model to disk

# Load the pickled model 
model = pickle.load(open('/content/drive/My Drive/decision_model.pkl','rb'))  
# Use the loaded pickled model to make predictions 
model.predict(X_test)

# save the model to disk
import joblib
filename = '/content/drive/My Drive/finalized_model.sav'
joblib.dump(classifier, filename)
 
# some time later...
 
# load the model from disk
loaded_model = joblib.load(filename)
result = loaded_model.score(X_test, y_test)
print(result)

# Visualising the Training set results
from matplotlib.colors import ListedColormap
X_set, y_set = X_train, y_train
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
                c = ListedColormap(('red', 'green'))(i), label = j)
plt.title('Decision Tree Classification (Training set)')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.legend()
plt.show()

# Visualising the Test set results
from matplotlib.colors import ListedColormap
X_set, y_set = X_test, y_test
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
                c = ListedColormap(('red', 'green'))(i), label = j)
plt.title('Decision Tree Classification (Test set)')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.legend()
plt.show()

# Complete Decision Tree Visualization
from sklearn.tree import export_graphviz
from sklearn.externals.six import StringIO  
from IPython.display import Image  
import pydotplus

dot_data = StringIO()
export_graphviz(classifier, out_file=dot_data,  
                filled=True, rounded=True,
                special_characters=True,class_names=['0','1'])
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
graph.write_png('diabetes.png')
Image(graph.create_png())

!pip install streamlit

# Load the pickled model
import pickle
pickle_in = open("/content/drive/My Drive/decision_model.pkl","rb")
model=pickle.load(pickle_in)

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st 
# from PIL import Image
# import pickle
# import numpy as np
# import matplotlib.pyplot as plt
# import pandas as pd
# st.set_option('deprecation.showfileUploaderEncoding', False)
# # Load the pickled model
# pickle_in = open("/content/drive/My Drive/decision_model.pkl","rb")
# model=pickle.load(pickle_in)
# dataset= pd.read_csv('/content/drive/My Drive/Social_Network_Ads.csv')
# X = dataset.iloc[:, [2, 3]].values
# from sklearn.preprocessing import StandardScaler
# sc = StandardScaler()
# X = sc.fit_transform(X)
# def predict_note_authentication(UserID, Gender,Age,EstimatedSalary):
#   output= model.predict(sc.transform([[Age,EstimatedSalary]]))
#   print("Purchased", output)
#   if output==[1]:
#     prediction="Item will be purchased"
#   else:
#     prediction="Item will not be purchased"
#   print(prediction)
#   return prediction
# def main():
#     st.title("Item Purchase Prediction")
#     html_temp = """
#    <div class="" style="background-color:blue;" >
#    <div class="clearfix">           
#    <div class="col-md-12">
#    <center><p style="font-size:40px;color:white;margin-top:10px;">Poornima Institute of Engineering & Technology</p></center> 
#    <center><p style="font-size:30px;color:white;margin-top:10px;">Department of Computer Engineering</p></center> 
#    <center><p style="font-size:25px;color:white;margin-top:10px;">Machine Learning Lab Experiment Deployment</p></center> 
#    </div>
#    </div>
#    </div>
#    """
#     st.markdown(html_temp,unsafe_allow_html=True)
#     UserID = st.text_input("UserID","Type Here")
#     Gender = st.text_input("Gender","Type Here")
#     Age = st.text_input("Age","Type Here")
#     EstimatedSalary = st.text_input("EstimatedSalary","Type Here")
#     resul=""
#     if st.button("Predict"):
#       result=predict_note_authentication(UserID, Gender,Age,EstimatedSalary)
#       st.success('Model has predicted {}'.format(result))
#     if st.button("About"):
#       st.text("Developed by Deepak Moud")
#       st.text("Head , Department of Computer Engineering")
# 
# if __name__=='__main__':
#   main()
#    
#

!nohup streamlit run  app.py &

!pip install pyngrok

!ngrok authtoken 1oEm0wopEJyjrT38ULluwUKK5fq_7ai4ZocZJ2YuFuoiJfoMh

from pyngrok import ngrok
url=ngrok.connect(port='8050')
url

!streamlit run --server.port 80 app.py

ngrok.kill()